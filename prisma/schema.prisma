// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init




generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  DENTIST
  ADMIN
  ASSISTANT
}

model Role {
  id           String        @id @default(uuid())
  nom          RoleEnum      @unique
  utilisateurs Utilisateur[]
}

model Utilisateur {
  id         String       @id @default(uuid())
  nom        String
  prenom     String
  email      String       @unique
  motDePasse String
  roles      Role[]
  rendezVous RendezVous[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Patient {
  id             String          @id @default(uuid())
  nom            String
  prenom         String
  dateNaissance  DateTime
  adresse        String
  telephone      String
  email          String
  dossierMedical DossierMedical?
  factures       Facture[]
  rendezVous     RendezVous[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Machine {
  id        String                      @id @default(uuid())
  nom       String
  modele    String
  dateAchat DateTime
  salles    Machine_SalleConsultation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RendezVous {
  id                  String            @id @default(uuid())
  startDate           DateTime
  endDate             DateTime
  patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId           String
  salleConsultation   SalleConsultation @relation(fields: [salleConsultationId], references: [id], onDelete: Cascade)
  salleConsultationId String
  utilisateur         Utilisateur       @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  utilisateurId       String
  soinsEffectues      SoinEffectue[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model SalleConsultation {
  id         String                      @id @default(uuid())
  numero     String
  capacite   Int
  rendezVous RendezVous[]
  machines   Machine_SalleConsultation[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ProduitConsommable {
  id       String                    @id @default(uuid())
  nom      String
  quantite Int
  seuil    Int
  soins    ProduitConsommable_Soin[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dent {
  code           Int @id
  position       String
  soinsEffectues SoinEffectue[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model DossierMedical {
  id             String         @id @default(uuid())
  dateCreation   DateTime       @default(now())
  patient        Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId      String         @unique
  documents      Document[]
  soinsEffectues SoinEffectue[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Document {
  id               String         @id @default(uuid())
  type             String
  dateCreation     DateTime       @default(now())
  fichier          String
  dossierMedical   DossierMedical @relation(fields: [dossierMedicalId], references: [id], onDelete: Cascade)
  dossierMedicalId String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Soin {
  code           String @id @default(uuid())
  description    String
  prix           Float
  soinsEffectues SoinEffectue[]
  produits       ProduitConsommable_Soin[]
  factureSoins   FactureSoin[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Facture {
  id        String   @id @default(uuid())
  date      DateTime
  montantTotal   Float
  statut    String
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
  factureSoins  FactureSoin[]
  soinEffectues  SoinEffectue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FactureSoin {
  id        String   @id @default(uuid())
  facture   Facture  @relation(fields: [factureId], references: [id], onDelete: Cascade)
  factureId String
  soin      Soin     @relation(fields: [soinId], references: [code], onDelete: Cascade)
  soinId    String
  montant     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SoinEffectue {
  id               String         @id @default(uuid())
  date             DateTime
  commentaire      String
  soin             Soin           @relation(fields: [soinId], references: [code], onDelete: Cascade)
  soinId           String
  dent             Dent           @relation(fields: [dentId], references: [code], onDelete: Cascade)
  dentId           Int
  rendezVous       RendezVous     @relation(fields: [rendezVousId], references: [id], onDelete: Cascade)
  rendezVousId     String
  dossierMedical   DossierMedical @relation(fields: [dossierMedicalId], references: [id], onDelete: Cascade)
  dossierMedicalId String
  facture         Facture?        @relation(fields: [factureId], references: [id])
  factureId       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Machine_SalleConsultation {
  machine             Machine           @relation(fields: [machineId], references: [id], onDelete: Cascade)
  machineId           String
  salleConsultation   SalleConsultation @relation(fields: [salleConsultationId], references: [id], onDelete: Cascade)
  salleConsultationId String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@id([machineId, salleConsultationId])
}

model ProduitConsommable_Soin {
  produitConsommable   ProduitConsommable @relation(fields: [produitConsommableId], references: [id], onDelete: Cascade)
  produitConsommableId String
  soin                 Soin               @relation(fields: [soinId], references: [code], onDelete: Cascade)
  soinId               String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@id([produitConsommableId, soinId])
}
